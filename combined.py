from functools import reduce
import string

print(reduce(lambda best, item: (best[0], 0) if item is None else (max(best[0], best[1] + item), best[1] + item), [int(l) if l.strip() else None for l in open('1/input')], (0, 0))[0], sum(sorted(reduce(lambda elves, item: elves + [0] if item is None else elves[:-1] + [elves[-1] + item], [int(l) if l.strip() else None for l in open('1/input')], [0]))[-3:]), sum([b + 1 + ((b - a + 1) % 3) * 3 for a, b in [(ord(l.split()[0]) - ord('A'), ord(l.split()[1]) - ord('X')) for l in open('2/input')]]), sum([b * 3 + ((a + b - 1) % 3) + 1 for a, b in [(ord(l.split()[0]) - ord('A'), ord(l.split()[1]) - ord('X')) for l in open('2/input')]]), sum([(set(bag[:len(bag)//2]) & set(bag[len(bag)//2:])).pop() for bag in [[ord(c.lower()) - ord('a') + c.isupper() * 26 + 1 for c in l.strip()] for l in open('3/input')]]), reduce(lambda s, b: (s[0], s[1] & b, s[2] + 1) if s[2] < 2 else (s[0] + s[1].pop(), b, 0), [{ord(c.lower()) - ord('a') + c.isupper() * 26 + 1 for c in l.strip()} for l in open('3/input')] + [set()], (0, set(range(1, 53)), -1))[0], *([sum(map(func, [tuple(sorted([tuple(map(int, i.split('-'))) for i in l.split(',')], key=lambda e: e[0])) for l in open('4/input')])) for func in (lambda e: e[0][0] == e[1][0] or e[1][1] <= e[0][1], lambda e: e[1][0] <= e[0][1])] + [''.join(s[-1] for s in reduce(func, [tuple([int(e) for e in l.split()[1::2]]) for l in open('5/input') if l[0] == 'm'], [[e[i] for e in [l[1::4] for l in open('5/input').read().split('\n 1')[0].strip().split('\n')][::-1] if e[i].strip()] for i in range(9)])) for func in (lambda state, act: [state[i][:-act[0]] if i == act[1]-1 else (state[i] + state[act[1]-1][:-act[0]-1:-1] if i == act[2]-1 else state[i][:]) for i in range(9)], lambda state, act: [state[i][:-act[0]] if i == act[1]-1 else (state[i] + state[act[1]-1][-act[0]:] if i == act[2]-1 else state[i][:]) for i in range(9)])]))
